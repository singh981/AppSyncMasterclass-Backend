schema {
    query: Query
    mutation: Mutation
}

type Query {
    getMyProfile: MyProfile!
    getProfile(screenName: String): Profile!
    getTweets(userId: ID!, limit: Int!, nextToken: String): TweetsPage!
    getLikes(userId: ID!, limit: Int!, nextToken: String): TweetsPage!
    getFollowing(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!
    getFollowers(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!
    getMyTimeline(limit: Int!, nextToken: String): TweetsPage!
    getImageUploadUrl(extension: String, contentType: String): AWSURL!
}
interface IProfile {
    id: ID!
    name: String!
    screenName: String!
    imageUrl: AWSURL
    backgroundImageUrl: AWSURL
    bio: String
    location: String
    website: AWSURL
    birthDate: AWSDate
    createdAt: AWSDateTime!
    followersCount: Int!
    followingCount: Int!
    tweetsCount: Int!
    likesCount: Int!
    tweets: TweetsPage! 
}
type MyProfile implements IProfile {
    id: ID!
    name: String!
    screenName: String!
    imageUrl: AWSURL
    backgroundImageUrl: AWSURL
    bio: String
    location: String
    website: AWSURL
    birthDate: AWSDate
    createdAt: AWSDateTime!
    followersCount: Int!
    followingCount: Int!
    tweetsCount: Int!
    likesCount: Int!
    tweets: TweetsPage!
}
type Profile implements IProfile {
    id: ID!
    name: String!
    screenName: String!
    imageUrl: AWSURL
    backgroundImageUrl: AWSURL
    bio: String
    location: String
    website: AWSURL
    birthDate: AWSDate
    createdAt: AWSDateTime!
    followersCount: Int!
    followingCount: Int!
    tweetsCount: Int!
    likesCount: Int!
    tweets: TweetsPage!
    following: Boolean!
    followedBy: Boolean! 
}
type TweetsPage {
    tweets: [ITweet!]
    nextToken: String
}
type ITweet {
    id: ID!
    Profile: IProfile!
    createdAt: AWSDateTime!
}
type Tweet implements ITweet {
    id: ID!
    Profile: IProfile!
    createdAt: AWSDateTime!
    text: String!
    replies: Int!
    likes: Int!
    retweets: Int!
    liked: Boolean!
    retweeted: Boolean!
}
type Reply implements ITweet {
    id: ID!
    Profile: IProfile!
    createdAt: AWSDateTime!
    text: String!
    replies: Int!
    likes: Int!
    retweets: Int!
    liked: Boolean!
    retweeted: Boolean!
    InReplyToTweet: ITweet! 
    InReplyToUsers: [IProfile!]
}
type Retweet implements ITweet {
    id: ID!
    Profile: IProfile!
    createdAt: AWSDateTime!
    retweetOf: ITweet!
}
type ProfilesPage {
    profiles: [IProfile!]
    nextToken: String
}



type Mutation {
    editMyProfile(newProfile: ProfileInput! ): MyProfile!
    tweet(text: String!): Tweet!
    like(tweetId: ID!): Boolean!
    unlike(tweetId: ID!): Boolean!
    retweet(tweetId: ID!): Boolean!
    unretweet(tweetId: ID!): Boolean!
    reply(tweetId: ID!, text: String!): Reply!
    follow(userId: ID!): Boolean!
    unfollow(userId: ID!): Boolean!
}
input ProfileInput {
    name: String 
    imageUrl: AWSURL 
    backgroundImageUrl: AWSURL 
    bio: String 
    location: String 
    website: String 
    birthDate: AWSDate
}